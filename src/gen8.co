
functor(Cons, Functor)
functor(Info, Functor)
functor(Token, Functor)

functor(Pair, Functor)
functor(Tuple, Functor)
functor(F, Functor)
functor(F1, Functor)
	
//parser

functor(Eq, Functor Any Any Any)
functor(Neq, Functor Any Any)
functor(Mut, Functor)
//functor(And, Functor Any Any Any)
functor(Or, Functor Any Any)
functor(True, Functor Null)
functor(False, Functor)
functor(Pred, Functor)
functor(Bracket, Functor)
functor(ObjPred, Functor)
functor(ObjData, Functor)
functor(Cond, Functor)
functor(Op, Functor)
functor(Host, Functor)

functor(SoftCut, Functor)
functor(Once, Functor)
functor(Declaration, Functor)
functor(Exclamation, Functor)
functor(Size, Functor)

//'world'
functor(Rel, Functor)
functor(Fact, Functor)

//'expression'
functor(Num, Functor Number)
functor(Str, Functor String)
functor(Id, Functor)
functor(ObjGet, Functor)
functor(ObjGet2, Functor)
functor(Func, Functor)
functor(TList, Functor)
functor(TTable, Functor)

functor(Error, Functor)
functor(None, Functor)

//gen
functor(Var, Functor String Number Functor) //Var(name, object|local|args, type)
functor(Var, Functor)
functor(Val, Functor Number)
functor(Const, Functor Number)
functor(Upvalue, Functor Number)
functor(Void, Functor)
functor(Local, Functor)
functor(Lib, Functor)
functor(Cur, Functor)

functor(Call, Functor)
functor(Put, Functor)
//functor(And, Functor Any Any)
functor(And, CWam)
functor(Eq, CWam)

/* misc */

rel require(i,i2)
	c::require(i, i2)

rel print(i)
	c::print(i)
	//true

rel pause()
	c::read(x)
	
rel halt()
	c::halt()

require('env8.bc', env14)

require('list5.bc', list)

require('string5.bc', string)

require('table5.bc', table)

//require('setup7.bc', setup)
//require('types2.bc', types)
require('types7.bc', types)

rel custom_throw(String msg, Functor info)
	//info=Info(line, col)
	//logic.throw('(line '+math.integerToString(line)+', col '+math.integerToString(col)+') '+msg)
	print(info)
	c::throw(msg)
	//c::throw('(line '+line+', col '+col+') '+msg)

rel throw(String msg)
	c::throw(msg)
	
//helpers
	
rel put_args(l,l2)
	case
		l=[n|t1]
		l2=[30,n,n|t2]
		put_args(t1, t2)
	case
		l=[]
		l2=[]
	
rel get_prefix(f, l, c)
	if(l=[])
		c=f
	else
		l=[a|tail]
		get_prefix(f,tail,c1)
		c=And(a, c1)
		
//helpers
rel list_to_and(l, t)
	if(l=[a])
		t=a
	elseif(l=[a|b])
		list_to_and(b,t1)
		t=And(a,t1)
	
rel make_temp(x)
	c::random(n)
	c::toString(n,s1)
	string.concat('::',s1,s)
	//s_concat('::',s1,s)
	x=Id(s, [])

rel make_temp_str(x)
	c::random(n)
	c::toString(n,s1)
	string.concat('~',s1,s)
	x=s
	
rel set(t,o,o2,t2)
	//c::table_set(t,o,o2,t2)
	table.set(t,o,o2,t2)
	c::cut()
	
rel get(t,o,o2)
	table.get(t,o,o2)
	c::cut()
	
rel size2(t,o2)
	list.size(t,o2)
	c::cut()
	
rel valid(e)
	fc=True
	e!=fc
	
rel str(s,s1)
	s1=Str('"'+s+'"')

//setup library

rel setup_const(env,env2, b, f)
	get(env,'consts',consts)
	list.size(consts,n)
	//print(n)
	env14.push_on(env, 'consts', b, env2)
	f=Const(n)

//set library
	
rel set_push_top(env, f, env2)
	c::undef(env2)
	get(env, 'top', l)
	set(env, 'top', Cons(f, l), env2)

//already knows it's an Id?
rel setup_term(env, env2, name, y)
	env14.vars(env, vars)
	list.size(vars,n_vars)
	env14.functors(env, fcs)
	f=Var(name, n, _)
	print(Pair('term', name))
	//print(fcs)
	if(list.find(fcs, f, z1)) //functor
		print(Pair('fcs', name))
		setup_const(env,env2,Str('"'+name+'"'),Const(n3))
		y=Func(n3,[])
	elseif(list.find(vars, f, z2))
		y=Val(n)
		env2=env
	else
		//c::throw('-')
		env2=env
		y=Var(n_vars)

rel setup_void(name, n, x)
	if(name='_')
		x=Void(n)
	else
		x=Val(n)

rel setup_void2(name, n, x)
	if(name='_')
		x=Void(n)
	else
		x=Var(n)
	
rel setup_new_var(env, env2, name, x, n)
	c::undef(env2)
	get(env,'branch',branch)
	//print(['new',name,branch,n])
	fc=Var(name,n,tc)
	tc=['Any']
	if(branch=0)
		env14.push(env, fc, env2)		
		setup_void2(name, n, x)
	else //re-occurs in branch
		//print(['new', name, get(env,'branch')])
		c::def(n)
		env14.push(env, fc, env1)
		set_push_top(env1, n, env2)
		x=Val(n)

rel setup_new_var2(env, env2, name, CVal x, tc)
	c::undef(env2)
	env14.vars(env, vars)
	list.size(vars,n)
	get(env,'branch',branch)
	//print(['new2',name,branch,n])
	fc=Var(name,n,tc)
	if(branch=0)
		env14.push(env, fc, env2)
		setup_void2(name, n, x)
	else //re-occurs in branch
		//print(['new', name, get(env,'branch')])
		c::def(n)
		env14.push(env, fc, env1)
		set_push_top(env1, n, env2)
		x=Val(n)
	
rel concat(Functor l, Functor l2, Functor l3)
	c::def(l2)
	//concat2(l,l2,l3)
	
rel reverse(Functor l, Functor l2)
	if(l=Cons(a,tail))
		reverse(tail, ltemp)
		list.concat(ltemp, Cons(a,Cons), l2)
	else
		l=Cons
		l2=Cons
	
rel make_upval(env, env2, n, x)
	get(env,'upvals',upvals)
	reverse(upvals,upvals2)
	if(list.find(upvals2, n, n2))
		print(['up',upvals, n])
		env2=env
		x=Upvalue(n2)
	else
		env14.push_on(env,'upvals',n,env2)
		c::cut()
		print(['up-add',upvals,n])
		size2(upvals,n2)
		x=Upvalue(n2)
		//print(env2)
	
rel setup_var(env, env2, name, x)
	//print(env14.vars)
	env14.vars(env, vars)
	list.size(vars,n_vars)
	fc=Var(name, n, tc)
	print([name,n])
	c::def(name)
	print(Tuple(name,n))
	//c::def(n)
	if(list.find(vars, fc, _a)) //variable in env
		//print(['var',vars])
		env2=env
		setup_void(name,n,x)
	elseif(env14.prevs(env, name, fc)) //upvalue
		print(['prev-var',name,n,tc])
		//tc!=[]
		//tc!=['Any']//not upvalue
		make_upval(env,env2, n, x)
		//print(x)
		//c::throw()
	else //new variable
		n=n_vars
		print(['branch-var', get(env,'branch'), n])
		setup_new_var(env, env2, name, x, n)
	c::def(n)
//

Relation extract_type_args
Relation extract_types

rel extract_type_id(env,f,type,info)
	f=Id(name, type_id)
	f1=Var(name,_,type2)
	print(['type',f,f1,type_id])
	if(list.has(env14.vars(env),f1))
		true
		print(['=',f1,type_id,type2])
		c::def(type2)
		print([type_id,type2])
		if(type_id=[])
			type1=['Any']
		else
			type1=type_id
		if(type2=['Any'])
			type=type1
		elseif(type1=['Any'])
			type=type2
		elseif(type2=type1)
			type=type2
		else
			print([type2,type_id])
			custom_throw('Variable defined with different types',info)
	else
		c::def(type_id)
		if(type_id=[])
			type=['Any']
		else
			type=type_id
			
rel extract_type(env,f,type)
	if(f=Num(s))
		type=['Number']
	elseif(f=Str(_))
		type=['String']
	elseif(f=Id(name, type_id))
		print(['type;',f])
		extract_type_id(env,f,type,info)
	elseif(f=TTable(_))
		type=['Table']
	elseif(f=TTable(_,_))
		type=['Table']
	elseif(f=TTable)
		type=['Table']
	elseif(f=Rel(_,_,_))
		type=['Relation']
	elseif(f=Rel(args,_))
		print(f)
		//halt()
		extract_types(env,args,t)
		type=['Relation'|t]
	else
		type=['Any']
		
rel send(a,type)
	if(a=['Number'] or a=['Integer'])
		type='math'
	elseif(a=['String'])
		type='string'
	elseif(a=['Any'])
		type='any'
	else
		type='any'
	
rel extract_types(env,l,ts)
	case
		l=[f1|tail] //check variables
		ts=[t1|t2] //check types
		extract_type(env,f1,t1)
		print(Tuple(f1,t1))
		extract_types(env,tail,t2)
	case
		l=[]
		ts=[]
	
rel push_types(env,env2,l,ts,n,ns)
	case
		l=[f1|tail] //check variables
		ts=[t1|t2] //check types
		ns=[n|ns2] //type id
		extract_type(env,f1,t1)
		push_types(env,env_1,tail,t2,n+1,ns2)
		f1=Id(name,_)
		env14.push(env_1, Var(name,n,t1), env2)
	case
		l=[]
		ts=[]
		ns=[]
		env2=env
		
rel bind_const(env,env2,f,n)
	//bind an atomic const like str or num
	//outputs its position
	if(f=Op(_,_,_,_))
		throw('const')
	else
		true
	table.get(env,'consts',c)
	size2(c,n) //n=#env14.consts
	env14.push_on(env, 'consts', f, env2)

rel table_to2(l, init, f, t)
	f=ObjData('_table','new',[init],_)
	t=init
		
rel list_to_cons2(l, t)
	if(l=Cons(a,Cons(Tuple(l2),Cons)))
		t=Func('Cons', [a, l2],_)
	elseif(l=Cons(a,l2))
		t=Func('Cons', [a, t2],_)
		list_to_cons2(l2, t2)
	else
		l=[]
		t=Id('Cons', [])
			
Relation generate_body
	
rel atom_const(b)
	b=Num(_) or b=Str(_) or b=Rel(_,_)
	
rel get_name(env,x,CWam f)
	x=Id(name,_)
	list.find(env14.vars(env), Var(name,n,_), _)
	f=Val(n)
	
	/*
	gen -> push_args? -> term
	
	gen: eq, pred, objpred
	term: func, objpred, ...
	*/
	
//generates temp() for a stm
rel tempify(env,env2,f1,f,temp,prefix)
	//generate_body(env,env2,f1,prefix)
	make_temp(temp)
	temp=Id(name2,_)
	generate_body(env,env2,f1,prefix)
	list.find(env14.vars(env2), Var(name2,n3,_), _)
	f=Val(n3)
	
rel term(env,env2,prefix,a,CWam f)
	env14.vars(env, vars)
	c::write('; ') and print(a)
	//n_vars=#vars
	env14.functors(env, fcs)
	fc1=Var(name,n,_)
	//print(a)
	cut
	if(a=Id(name,_))
		if(list.find(fcs, fc1, _a)) //0-arguments functor
			f1=Func(name,[],_)
			term(env,env2,prefix,f1,f)
			print(['fc',name,f])
		else
			setup_var(env, env2, name, f)
			prefix=True
	elseif(a=Func(name,args,_))
		f2=Var(name,n2,_)
		if(list.find(fcs, f2, _a)) //term is a functor
			print(['func',a])
			make_temp(temp)
			generate_body(env,env2,Eq(temp, a, _),prefix)
			get_name(env2,temp,f)			
			//print(['prefix',prefix,temp,f,targs])
		else //term is a relation in function syntax
			print('function')
			make_temp(temp)
			l0=[temp]
			list.concat(args,l0,l1)
			print(l1)
			generate_body(env,env2, Pred(name,l1,_),prefix)
			get_name(env2,temp,f)
	elseif(a=Op(a1,b1,op,info))
		//throw(2)
		print(a)
		temp=make_temp()
		if(op='+')
			s='add'
		else
			s='sub'
		extract_type(env,a1,a2)
		send(a2,lib)
		print(['op',op, a1,lib])
		if(lib='any')
			f3=Host('c', s,[a1,b1,temp])
		elseif(lib='math')
			f3=Host('c', s,[a1,b1,temp])
		elseif(lib='string')
			make_temp(temp2)
			f3=And(Host('c', 'toString',[b1,temp2]), Host('c', s,[a1,temp2,temp]))
		else
			custom_throw('no library found for type',info)//throw(1)
		generate_body(env,env2, f3,prefix)
		get_name(env2,temp,f)
		print(prefix)
		//throw(1)
	elseif(a=ObjPred(obj,name,args,info))
		print(Pair('obj',a))
		print(b)
		//throw(1)
		make_temp(temp)
		f3=ObjPred(obj,name,list.concat(args,[temp]),info) //p(temp)
		print(f3)
		generate_body(env,env2, f3,prefix)
		temp=Id(name2,_)
		list.find(env14.vars(env2), Var(name2,n3,_), _)
		f=Val(n3)
	elseif(a=TList(args))//!
		list_to_cons2(args, a1)
		print(['term;list',a1])
		term(env,env2, prefix, a1, f)
	elseif(a=TTable(True,_))//!
		//f1=ObjPred('list','size',[temp],_)
		//c::halt()
		make_temp(temp)
		temp=Id(name2,_)
		f1=ObjPred('table','new',[temp],_)
		//tempify(env,env2,f1,f,temp,prefix)
		print(F(f1))
		generate_body(env,env2,f1,prefix)
		//tempify(env,env2,f1,f,temp,prefix)
		//print(F1(f1,a,env2))
		list.find(env14.vars(env2), Var(name2,n3,_), _)
		print(F1(f,n3,env2))
		f=Val(n3)
	elseif(a=TTable(args))
		make_temp(temp)
		f1=ObjData('_table','new',[temp],_)
		print(Tuple(f1,args))
		//print(a)
		table_to(env, args, temp, a, f)
		print(['t',f1,f])
		//throw(21)
		generate_body(env,env2,And(f1,f),t)
	elseif(a=Size(a1, _))
		print(Pair('#',a))
		f1=ObjPred('list','size',[a1,temp],_)
		tempify(env,env2,f1,f,temp,prefix)
	elseif(a=ObjGet(a1, b1))
		print('term')
		f1=ObjData('_table','get',[Id(a1,_),Str('"'+b1+'"'),t0],_)
		tempify(env,env2,f1,f,t0,prefix)
	elseif(a=ObjGet2(a1, b1))
		make_temp(temp)
		temp=Id(name2,_)
		//throw(1) //check
		f1=ObjData('_table','get',[Id(a1,_),b1,temp],_)
		generate_body(env,env2,f1,prefix)
		list.find(env14.vars(env2), Var(name2,n3,_), _)
		f=Val(n3)
	elseif(a=Rel(args, c))
		c::cut()
		make_temp(temp)
		temp=Id(name2,_)
		f1=Rel(name2,args,c)
		generate_body(env,env2,f1,prefix)
		list.find(env14.vars(env2), Var(name2,n3,_), _)
		f=Val(n3)
	elseif(atom_const(a)) //Num, Rel, Str, ...
		setup_const(env,env2, a, f)
		//print(['const',a,f])
		prefix=True
	else
		print(Tuple(a))
		custom_throw('not a recognized expression',_)

rel findid(env, name, n)
	list.has(env14.vars(env), Var(name,n,_))

rel pushid(env, env2, name, x2)
	env14.size(env,x2)
	env14.push(env, Var(name,x2,['Any']),env2)
	
//updates a change of type, etc.		
rel env_update(env, name, tc, env2)
	f = Var(name, n , tc)
	
	if(list.has(env14.vars(env), Var(name, n, t1)))
		//env2=env
		if(tc=t1)
			env2=env
		else/*
			env14.remove(env, Var(name, n, t1),env1)
			print(env1)
			c::halt()*/
			env14.push(env, f,env2)/*
			//env14.remove(env, x,env2)
			//env14.update(env, Var(name, n, t1), f,env2)
	elseif(env14.prevs(env, name, Var(name, n, t1))) //upvalue
		env2=env
		tc=t1
		throw(222)*/
	else
		print(['-',f])
		env14.push(env, f,env2) //todo upval? or local
		//env14.push_on(env, 'vars',f,env2)
		//env2=env
		
rel comp_arg(env,env2,prefix,name,n1,n2)
	print(['comp',name,n1,n2])
	if(findid(env,name,x1))
		true
	else
		print(name)
		throw('no variable')
	//throw(1)
	n1=Val(x1)
	//print(['comp',n1])
	//setup_new_var2(env, env2, name, x, type)
	pushid(env, env2, name, x2)
	//print(['comp4',x2])
	//findid(env,name,x2)
	n2=Var(x2)
	//term(env,env1,prefix,a,n2)
	prefix=True
	
rel push_args(env,env2,l,l2,n,p)
	if(l=[a|t1])
		print(['=',a])
		if(a=Mut(x))
			comp_arg(env,env1,prefix,x,n1,n2)
			print(['comp',n1,n2])
			l2=[n1,n2|t2]
			print(l2)
		else
			term(env,env1,prefix,a,n2)
			l2=[n2|t2]
		p=[prefix|p2]
		print(F('args',l2,n2))
		c::def(n2)
		l2=[y|_]
		c::def(y)
		if(y=Mut(_))
			throw(1)
		else
			true
		push_args(env1,env2,t1, t2, n+1,p2)
	else
		l=[]
		l2=[]
		env2=env
		p=[]
	
rel table_to(env, l, t0, t, f)
	print(['dict',l, t0, t, f])
	if(l=And(a,b))
		if(a=True)
			table_to(env, b, t0,t,f)
		elseif(b=True)
			table_to(env, a, t0,t,f)
		else
			make_temp(t1)
			table_to(env, a, t0,t1,f1)
			table_to(env, b, t1,t,f2)
			f=And(f1,f2)
			print(f)
	elseif(l=And(a,b,_))
		table_to(env,And(a,b), t0, t, f)
	elseif(l=Eq(a,b,info))
		if(a=Id(name,_))
			f=ObjData('_table','set2',[t0,t,str(name),b],_)
		else
			f=ObjData('_table','set2',[t0,t,a,b],_)
	elseif(l=True)
		f=True
		t0=t
	elseif(l=Rel(name,args,f1))
		term(env,env2,prefix,a,CWam f)
		//generate_body(env,_,f,prefix)
		table_to(env, Rel(args,f1), t0, t, f)
		//table_to(env, Eq(Id(name,[]),Rel(args,f1), t0, t, f)
	else
		print(l)
		throw('cannot convert to table')

rel specialize_type(env, a, ta, tb, env2)
	if(a=Id(name,_))
		print([ta,tb])
		if(types.strict_type(ta,tb,tc))
			print(['update',name,tc])
			//print(env)
			cut
			env_update(env, name, tc, env2)
			print(['update',env14.vars(env2)])
		else
			//io.writeln([ta,tb])
			//logic.throw("no strict") //todo: ???
			throw("no strict")
	else
		env2=env

rel extract_type_args(l,ts,env)
	case
		l=Cons(Mut(f1),Cons)
		ts=Cons(['Any'],Cons(['Any'],Cons))
	case
		l=Cons(f1,Cons)
		ts=Cons(t,Cons)
		extract_type(env,f1,t)
	case
		l=Cons(f1,tail)
		ts=Cons(t1,t2)
		extract_type(env,f1,t1)
		extract_type_args(tail,t2,env)
	case
		l=Cons
		ts=Cons

rel compare_args(f, t1, t2, env, env2, info)
	c::cut()
	f=Id(name,t1)
	print(args)
	extract_type_args(args,targs,env)
	//list.filter(args, is_id, ids)
	//list.fold(ids, env_push, env, env_a)
	//specialize_args(args,targs,env,env2)
	env=env2
	t2=Cons('Relation',targs)
	//io.writeln(t1)
	//io.writeln(t2)
	if(types.compare_types(t1,t2))
		true
	else
		//msg='calling relation "'+name+'" of type "'+types.type_to_string(t1)+'" as "'+types.type_to_string(t2)+'"'
		print([t1,t2])
		msg='calling relation '+name
		custom_throw(msg,info)
	
rel compare_relation(f, args, env, env2, info)
	c::cut()
	f=Pair(name,t1)
	print(['frel',f])
	extract_type_args(args,targs,env)
	//list.filter(args, is_id, ids)
	//list.fold(ids, env_push, env, env_a)
	//specialize_args(args,targs,env,env2)
	env=env2
	t2=Cons('Relation',targs)
	if(types.compare_types(t1,t2))
		true
	else
		//msg='calling relation "'+name+'" of type "'+types.type_to_string(t1)+'" as "'+types.type_to_string(t2)+'"'
		//print(['types',t1,t2])
		print('types')
		print(args)
		print(t1)
		print(t2)
		msg='calling relation '+name+' with wrong type'
		custom_throw(msg,info)
	
rel compare_functor1(f1, args, t2, info)
	f1=[t1|tail1]
	f2=[t2|tail2]
	
rel compare_functor(env, args, t2, info)
	extract_type_args(args,targs,env)
	type = Cons('Functor', targs)
	t2 = Cons(_, targs2)
	type2=Cons('Functor', targs2)
	//env14.functors(env, Var(name2,n2,t2))
	if(types.compare_types(type, type2))
		true
	else
		print(F(type, type2))//t2,targs,targs2
		msg='functor of different type'
		//msg='using functor '//+name+' of type "'+types.type_to_string(t1)+'" as "'+types.type_to_string(t2)+'"'
		custom_throw(msg, info)
		
rel bind_type(env,env2,a,b,ta,tb,info)
	if(types.compare_types(ta, tb))
		//print(['code',a,b,code])
		print(['type',ta,tb])
		specialize_type(env, a, ta, tb, env2)
	else
		print(['type',ta,tb])
		//custom_throw('cannot unify type "',info)//+types.type_to_string(ta)+'" with type "'+types.type_to_string(tb)+'"', info)
		custom_throw('cannot unify types',info)
	
rel bind_type2(env,env2,a,ta,tb,info)
	//env=env2
	if(types.compare_types(ta, tb))
		//print(['code',a,b,code])
		print(['type',a,ta,tb])
		specialize_type(env, a, ta, tb, env2)
		//pl::writeln(['consts',env2.consts])
	else
		print(['type',ta,tb])
		//custom_throw('cannot unify type "',info)//+types.type_to_string(ta)+'" with type "'+types.type_to_string(tb)+'"', info)
		custom_throw('cannot unify types2',info)
	
rel compare_types(env,env2,a,b,info)
	extract_type(env,a,ta)
	extract_type(env,b,tb)
	if(types.compare_types(ta, tb))
		//print(['code',a,b,code])
		print(['type',ta,tb])
		//c::halt()
		specialize_type(env, a, ta, tb, env2)
		//pl::writeln(['consts',env2.consts])
	else
		print(['type',ta,tb])
		//custom_throw('cannot unify type "',info)//+types.type_to_string(ta)+'" with type "'+types.type_to_string(tb)+'"', info)
		custom_throw('cannot unify types',info)
	
//bind id name to any term
rel bind_term(env,env2, name, b, t)
	setup_var(env,env1,name,x)
	cut
	term(env1, env2, prefix, b, y)
	//comp_var(env3, env2, x, y)
	t=And(prefix, Eq(x, y))
	print(Tuple(x,y,t))

//bind id
rel bind_void(env1,env2, b, CVal y)
	//print([a,b])
	if(b=Id(name2,_)) //var case, x = y
		setup_term(env1,env2,name2,y)
	else //const case, x = c
		//print('bind const')
		bind_const(env1,env2,b,c)
		y=Const(c)
	
rel bind(env,env2, a, b, t, info)
	get(env, 'fcs', fcs)
	if(a=Id(name,_)) //assign a := b
		//first check cases where b is composite (usually syntax sugar for simple cases, do not type check)
		//only if b is (1) a functor, 2 id, 3 const, it needs type check
		if(b=Func(name2,args,_))
			if(list.find(fcs, Var(name2,n2,t2), _)) //functor
				print(['eq-functor',b])
				setup_var(env,env1,name,x)
				setup_const(env1,env3,Str('"'+name2+'"'),Const(n3))
				push_args(env3, env2, args, l, 0, ps)
				y=Func(n3,l)
				list.filter(ps, valid, ps2)
				list.concat(ps2, [Eq(x, y)], t1)
				list_to_and(t1, t)
				//print(fcs)
				print(['fcs',a,b])
				print(Pair('args',args,'fc-type',t2))
				compare_functor(env,args,t2,info)
			else //relation
				print('eq-rel')
				list.push(args,a,l)
				generate_body(env,env2,Pred(name2,l,_),t)
				print(t)
		elseif(b=TList(args))
			list_to_cons2(args, b1)
			bind(env, env2, a, b1, t, info)
		elseif(b=TTable(args))
			make_temp(temp)
			f1=ObjData('_table','new',[temp],_)
			print(Tuple(f1,args))
			//print(a)
			table_to(env, args, temp, a, f)
			print(['t',f1,f])
			throw(21)
			generate_body(env,env2,And(f1,f),t)
		elseif(atom_const(b))
			print(['bind',a,b,t])
			l=Rel(_,_)
			cut
			if(b!=l)
				print(['bind-type'])
				//print(['-',env])
				//bind_type(env,env0,a,b,info)
				extract_type_id(env,a,t1,info)
				if(t1=[])
					ta=['Any']
				else
					ta=t1
				extract_type(env,b,tb)
			else
				true //don't check type
			//print([t,env2])
			//extract_type(env,b,tb)
			setup_var(env,env1,name,x)
			bind_void(env1,env3, b, y)
			print([a,b,x,y])
			bind_type(env3,env2,a,b,ta,tb,info)
			t=Eq(x, y)
		else
			print(['bind-term',a,b])
			bind_term(env,env1, name, b, t)
			compare_types(env1,env2,a,b,info)
			//print(t)
	elseif(b=Id(name,_)) //assign b := a
		bind_const(env,env2,a,c)
	else
		custom_throw('comparing consts is redundant',info) //todo warning
	
rel generate_cond(l, code, env, env2)
	if(l=Cons(c, l2)) //elseif(c) d
		generate_body(env,env_a,c,t1)
		print(['-up',table.get(env_a,'upvals'),c])
		generate_cond(l2, code1, env_a, env2)
		code=Cons(t1, code1)
	elseif(l=[])
		code=[]
		env2=env
		

//ObjGet and ObjPred are converted in serialize4 to 'table.bc' / c::table (old bindings)

		
rel gen_get(env1,env3,n)
	if(env14.get_var(env1,obj,Var(_,n,_)))
		env3=env1
	else
		if(env14.prevs(env1,obj,Var(obj,obj_n,_)))
			make_upval(env1, env3, obj_n, n)
		else
			custom_throw('cannot find relation '+name, info)
		
/*
	and, or, eq, cond, => (obj)p, decl, def
	
	The latter have analogous constants (terms) to them
*/
	
rel set_var(env, name, x, n)
	env14.vars(env, vars)
	fc=Var(name,n,tc)
	list.find(vars, fc, _a2)
	setup_void2(name, n, x)

rel temp2(Functor l, i, Functor l2)
	if(l=Cons)
		l2=Cons
	else
		l=Cons(head, tail)
		l2=Cons(h2, tail2)
		h2=Put(head,i)
		temp2(tail, i+1, tail2)

rel var_name(x,y)
	x=Var(y,_,_)

rel gen3(env, env2, Functor f, Functor code)
	get(env, 'vars', vars)
	n_vars=#vars
	get(env, 'fcs', fcs)
	get(env, 'prev', prev)
	f=Pred(name, args, info)
	//print(['f',vars,fcs])
	if(env14.get_var(env,name,Var(_,n,type)))
		//print(['f',args,type])
		compare_relation(Pair(name,type), args, env, _, info)
		get_prefix(Pred(l, n), list.filter(push_args(env,env2,args, l, 0), valid), code)
		//print(['pred',code])
	elseif(name='export')
		args=Cons(Id(name2, _), _)
		print([name,args])
		if(list.find(vars, Var(name2, n, _), _))
			true
		else
			throw('exporting unknown (unbound) value')
		code=Put(Val(n), 252)
		env=env2		
	elseif(name='call')
		//print(['call',f])
		//call_(args,args2,name2)
		args=[Id(name2,_)|a2]
		args=[a1|a2]
		print(['call',name2,a2])
		if(list.find(vars, Var(name2, n, _), _))
			y=n
		else
			throw('call')
		f1=And(Host('c','apply1',[a1]),Host('c','apply2',a2))
		generate_body(env, env2, f1, c1)
		//code=And(ps,c1)
		code=And(c1,Call(251))
		print(Pair(a1,code))
		//code=l2
		//throw(2)
	else
		f=Pred(name, args, info)
		a=Var(name,n1,type)
		print('upval')
		if(list.find(fcs, a, _)) //using functor as relation
			print('error: found '+name)
			custom_throw('cannot find relation '+name, info)
		elseif(env14.prevs(env,name,a)) //upvalue
			c::cut()
			//c1=Var(_,_,type)
			push_args(env,env0,args, l, 0, ps)
			make_upval(env0, env2, n1, n)
			//gen_pred(env, n, code)
			compare_relation(Pair(name,type), args, env, _, info)
			get_prefix(Pred(l, n), list.filter(ps, valid), code)
			c::cut()
			n=Upvalue(i)/*
			if(c::ge(i,180))//todo check in other cases
				print(Pair('n',i))
				print(f)
				print(env)
				c::throw('too many upvalues in function')
			elseif(c::ge(n_vars,180))
				print(f)
				print(vars)
				print(Pair('n',i,n_vars))
				c::throw('too many variables in function')
			else
				true*/
		else
			//print(env14.vars)
			c::print(f)
			print('cannot find relation '+name)
			custom_throw('cannot find relation '+name, info)

rel generate_body(env, env2, Functor f, Functor code)
	get(env, 'vars', vars)
	n_vars=#vars
	get(env, 'fcs', fcs)
	c::def(f)
	cut
	//print('-')
	//c::write('- ') and print(f)
	//io.write('-') and print(env14.vars)
	//print(env)
	if(f!=And(_,_) and f!=And(_,_,_))
		//print(['gen',Pair(f, n_vars)])
		c::write('- ') and print(f)
		true
	else
		true
	if(f=And(a,b,line))
		generate_body(env,temp,a,s1)
		c::def(s1)
		generate_body(temp,env2,b,s2)
		code=And(s1,s2,line)
		
	elseif(f=And(a,b))
		generate_body(env,temp,a,s1)
		c::def(s1)
		generate_body(temp,env2,b,s2)
		code=And(s1,s2)

	elseif(f=Cond(a,b,l)) //if(a) b [l]
		generate_body(env, env2, Cond(And(a,b), l), code)
		print(F1(code))
		
	elseif(f=Cond(a,l)) //if(a) true [l]
		get(env,'branch',branch)
		print(['-cond',branch])
		//print(l)
		if(branch=1)
			set(env,'branch',2, env1)
		else
			set(env,'branch',1, env1)
		//print([2,env_a])
		generate_body(env1, env_a, a, t1)
		print([3,l])//print(['up',table.get(env_a,'upvals')])
		generate_cond(l, scond, env_a, env3) //generate else clause//print(['up2',table.get(env3,'upvals')])
		if(branch=0) //first cond
			//print(Pair(t1, scond))
			set(env3,'top',[],env_b)
			set(env_b,'branch',0,env2) //reset it to 0
			get(env3,'top',t) //env3.top=t //declare vars for branch
		else
			env3=env2
			t=[]
		code=Cond(t1, scond, t)
		//print(['up2',table.get(env2,'upvals')])
		print([4,scond])
		print(F1(code))
		//throw(2)
		
	elseif(f=Or(a,b))
		code1=Cond(a,Cons(b,Cons))
		generate_body(env,env2,code1,code)
		
	elseif(f=Rel(name,args,f1))
		//f2=Id(name,t1) //todo?
		/*
		if(list.find(env14.vars(env), Var(name,_,type), _))
			if(type=['Relation',['Undefined']])
				true
			else
				custom_throw(name+' is already defined',Info(0,0))
		else
			true*/
		bind(env,env1,Id(name,[]),Rel(code1, env3),code, info)
		get(env1, 'fcs', fcs1)
		env14.new(env_b, fcs1, env1)
		//c::break()
		push_types(env_b,env_fn,args,type,0,ns)
		t1=Cons('Relation',type)
		env_update(env1, name, Cons('Relation',type), env4)//calling body
		//calling body
		generate_body(env_fn,env3,f1,body)
		put_args(ns,largs)
		extract_types(env3, args, type2) //get current type of variables within function
		t2=Cons('Relation',type2)
		bind_type2(env4,env2,Id(name,[]),t1,t2, info) //compare with initial type
		get(env3, 'vars', vars3)
		size2(vars3,n3)
		size2(args,n_args)
		if(body=Cond(a,b))
			code1=[Pair(name, n_args), [], Cond(a,b,largs), n3]
		else
			code1=[Pair(name, n_args), largs, body, n3]
		print(body)
		print('\n\nrel '+name)
		//print(table.get(env4,'vars'))
		//print(table.get(env2,'vars'))
		c::cut()
		print(['->', name, code1])//, env3.consts, env3.vars])
		//halt()
		//print(table.get(env3,'vars'))
		//print(table.get(env3,'upvals'))
		//print(table.get(env_fn,'upvals'))
		//env_update(env1, Id(name,t1), env2)
		//env14.push_on(env1, 'vars',Var(name,n,t1),env2)
		//env2=env1
	
	elseif(f=Fact(name, args, info))
		if(name='functor')
			code=True
			c=Var(name2,0,type)
			args=[Id(name2,_), Id(arg1, arg2)]
			//args=[h|t]
			print(F(arg1,arg2))
			if(arg2=[])
				type=[arg1]
			else
				list.concat(arg2, [[arg1]], type) //add last name (arg1) to the end of type
				print(type)
			type=Cons(first_type, _)
			print(['-',first_type,arg1,arg2,type])
			//print(c)
			env14.push_on(env, 'fcs', c, env1)
			if(first_type!='Functor')
				env14.get(env,'types',o)
				//print(o)
				table.set(o,first_type,'Functor',o2)
				//print(o2)
				env14.set(env1, 'types', o2, env2)
			else
				env1=env2
			//env1=env2
		elseif(list.has(['cut'],name))
			f1=Host('c',name,args)
			generate_body(env, env2, f1, code)
		elseif(name='throw')
			f1=Host('c','throw',args)
			generate_body(env, env2, f1, code)
			args=[c|_]
			//c::throw(c)
		else
			c::throw('fc')
			
	elseif(f=Eq(a,b,info))
		print(['code',code])
		bind(env,env_b,a,b,code,info)
		//bind_type(env_b,env2,a,b)
		//code=Eq
		env2=env_b
		
	elseif(f=Host('c', name, args))
		push_args(env,env1,args, l, 0, ps)
		setup_const(env1,env2,Str('"'+name+'"'),Const(n))
		c1=Host(l, n)
		get_prefix(c1, ps, code) //code=Host(l, n)
		
	elseif(f=Neq(a,b))
		l=[a,b]
		f1=Host('c','neg',l) //volatile?
		generate_body(env, env2, f1, code)
	
	elseif(f=Pred(name, args, info))
		gen3(env, env2, Functor f, Functor code)	

	elseif(f=ObjData(obj, name, args, info)) //equivalent to ObjGet(obj, name, l, o), Pred(o, l)
		print('-')
		setup_const(env,env1,Str('"'+name+'"'),Const(n1))
		if(env14.get_var(env1,obj,Var(_,n,_)))
			push_args(env1,env2,args, l, 0, ps)
			get_prefix(ObjPred(l, n, n1), list.filter(ps, valid), code)
			print(Tuple(code))
			//env2=env
		else
			push_args(env1,env0,args, l, 0, ps)
			c::cut()
			if(env14.prevs(env,obj,Var(obj,obj_n,_)))
				make_upval(env0, env2, obj_n, x) //obj is _table
				code1=ObjPred(l, x, n1) //ObjPred(args,obj:up, name)
				print(F(x))
				get_prefix(code1, list.filter(ps, valid), code)
			else
				//print(env14.vars)
				//custom_throw('cannot find relation '+name, info)
				custom_throw('cannot find object '+obj, info)
	elseif(f=ObjPred(obj, name, args, info)) //equivalent to ObjGet(obj, name, l, o), Pred(o, l)
		print('-')
		make_temp(temp)
		temp=Id(name2,_)
		s1=Str('"'+name+'"')
		s=Str('"'+obj+'"')
		//f1=And(Host('c','get',[s,s1,temp]), Pred(name2,args,info))
		if(env14.get_var(env,obj,Var(_,_,_)) or env14.prevs(env,obj,Var(obj,_,_)))			
			f1=And(ObjData('_table','get',[Id(obj,['Any']),s1,temp],info), Pred(name2,args,info))
			print(f1)
			generate_body(env, env2, f1, code)
		else
			//print(env14.vars)
			//custom_throw('cannot find relation '+name, info)
			custom_throw('cannot find object '+obj, info)
	
	elseif(f=Declaration(name, type))
		print('declaration')
		setup_new_var2(env, env2, name, x, type)
		code=Put(x)
		print(env14.vars(env2))
		
	elseif(f=True)
		env2=env
		code=True
	
	elseif(f=False)
		env2=env
		code=False
	else
		print(f)
		c::throw('cannot compile code')
		
	
t={
	'generate_body'=generate_body
	'generate_world'=generate_world
}
print(t)
export(t)/*
t1=['Any']
print(t1)

//c::table_set(t5,'code',code,t)
table.new(nil)
env14.new(e, [], nil)
print(e)
c::cut()
f1=Eq(Id('a',t1),Id('b',t1),_)
//f1=Num(1)
//f1=Fact('functor',[Id('Cons',t1),Id('Functor',t1)],info)
generate_body(e,e2,f1,f)
//f1=Id('a',_)
//term(e,e2,prefix,f1,f)
//bind(e,_, Id('a',_), Id('b',_), t)
//bind_void(e,_, Id('a',_), t)
print('')
print(f)
//print(t)
//print('end')
//[Put(Val(11), 251), Put(Val(14), 0)]

types.compare_types(t1,['Integer'])*/