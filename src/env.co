
functor(Cons, Functor)
functor(F, Functor)
functor(F2, Functor)

//gen
functor(Var, Functor) //Var(name, object|local|args, type)
functor(Lib, Functor)

rel require(i,i2)
	c::require(i, i2)

rel print(i)
	c::print(i)

rel pause()
	c::read(x)
	
//list lib

rel first(Functor l, Any a)
	l=Cons(a,_)

rel rest(Functor l, Any b)
	l=Cons(_,b)
	
require('list.bc', list)

rel has(Functor l, Any e)
	if(l=Cons(e, _))
		true
	else
		l=Cons(_, tail)
		has(tail,e)

rel size(Functor l, Integer n)
	//c::lsize(l, n)
	list.size(l,n)

/*
	env methods
*/

require('table.bc', table)

rel set(t,o,o2,t2)
	//c::table_set(t,o,o2,t2)
	table.set(t,o,o2,t2)
	c::cut()
	
rel get(t,o,o2)
	//c::table_get(t,o,o2)
	table.get(t,o,o2)
	c::cut()
	
rel env_init(env, vars, fcs, consts, prev)
	//c::table_new(t)
	table.new(t)
	set(t,'vars',vars,t1)
	set(t1,'fcs',fcs,t2)
	set(t2,'consts',consts,t3)
	set(t3,'upvals',[],t4)
	set(t4,'branch',0,t5)
	set(t5,'top',[],t6)
	set(t6,'prev',prev, env)

rel env_new(env, fcs, prev)
	env_init(env, [], fcs, [], prev)
	
rel env_size(env, n)
	get(env, 'vars', x)
	size(x, n)
	
rel env_vars(env, x)
	get(env, 'vars', x)

rel env_functors(env, x)
	get(env, 'fcs', x)
	
rel env_push(env, f, env2)
	f=Var(name,n,type)
	c::def(n)
	env_vars(env,x)
	set(env, 'vars', Cons(f, x), env2)
	
rel env_push_on(env, String str, f, env2)
	//c::table_get(env, str, l)
	get(env, str, l)
	fc=Cons(f, l)
	//print(f)
	set(env, str, fc, env2)
	//c::throw('-')
	
rel env_push_var(env, env2, f)
	env_push_on(env, 'vars', f, env2)
	
rel set_push_top(env, f, env2)
	get(env, 'top', l)
	set(env, 'top', Cons(f, l), env2)
		
rel env_push_if_not_found(env, f, env2)
	//vars = env.vars
	get(env, 'vars', vars)
	f = Var(name, _ , _)
	if(has(vars, Var(name, _, _)))
		env2=env
	else
		set(env,'vars', Cons(f, vars), env2)
	
/* 
	env searching
*/

rel _env_get_var(l, a, f)
	case
		l=Cons(head, _)
		head=Var(a,_,_)
		f=head
		//print(l)
	case
		l=Cons(_, tail)
		_env_get_var(tail, a, f)
	
rel _env_get_mod(env, a, b)
	case
		env=Cons(head, _)
		head=[a, b]
	case
		env=Cons(_, tail)
		_env_get_mod(tail, a, b)

rel env_get_var(env, a, f)
	get(env, 'vars', vars)
	_env_get_var(vars, a, f)
	
rel env_prevs(env, a, f)
	get(env, 'prev', prev)
	get(prev, 'vars', vars) //vars=env.prev.vars
	_env_get_var(vars, a, f)
	
rel find_lib(env, obj_name)
	env_vars(env, vars)
	list.find(vars, Lib(_, obj_name), _)

//require('list.bc', list)

first([1,2], x)
		
c::table_new(t0)
c::table_set(t0,'new',env_new,t1)
c::table_set(t1,'vars',env_vars,t2)
c::table_set(t2,'push_on',env_push_on,t3)
c::table_set(t3,'push',env_push,t4)
c::table_set(t4,'functors',env_functors,t5)
c::table_set(t5,'size',size,t5)
c::table_set(t5,'prevs',env_prevs,t6)
c::table_set(t6,'set_push_top',set_push_top,t7)
c::table_set(t7,'get_var',env_get_var,t8)
c::table_set(t8,'init',env_init,t9)
c::table_set(t9,'push_var',push_var,t)
export(t)
