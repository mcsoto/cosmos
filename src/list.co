/*

rel get(Functor L, N, Any Element)
	pl::nth0(N,L,Element)
*/
//require('table.bc', table)
functor(Cons, Functor)
//FunctorObject Cons

require('string5.bc', string)	

rel size(Functor l, n)
	if(l=[])
		n=0
	else
		l=Cons(_,tail)
		size(tail,j)
		n=j+1
	
//list lib

rel filter(Functor l, Relation Any p, Functor l2)
	if(l=Cons)
		l2=Cons
	else
		l=Cons(head, tail)
		if(p(head))
			l2=Cons(head, tail2)
			filter(tail, p, tail2)
		else
			filter(tail, p, l2)

rel removeAll(Functor l, Relation Any p, Functor l2)
	if(l=Cons)
		l2=Cons
	else
		l=Cons(head, tail)
		if(p(head))
			removeAll(tail, p, l2)
		else
			l2=Cons(head, tail2)
			removeAll(tail, p, tail2)

rel remove2(Functor l, i, n, l2)
	case
		l=[]
		l2=l
	case
		l=[e1|tail]
		if(i=n)
			l2=tail
		else
			i2=i+1
			l2=[e1|l3]
			remove2(tail, i2, n, l3)
		
rel removeIndex(Functor l, i, l2)
	c::type(i,'int')
	remove2(l, 0, i, l2)
	
rel remove(Functor l, n, l2)
	case
		l=[]
		l2=l
	case
		l=[e|tail]
		if(e=n)
			l2=tail
		else
			l2=[e|l3]
			remove(tail, n, l3)
		
rel has(Functor l, Any e)
	if(l=Cons(e, _))
		true
	else
		l=Cons(_, tail)
		has(tail,e)

rel concat(Functor l, Functor l2, Functor l3)
	case
		l=[]
		l3=l2
	case
		l=Cons(e, t1)
		concat(t1, l2, l0)
		l3=Cons(e, l0)

rel push(Functor l, x, Functor l2)
	l2=Cons(x, l)
	
rel pop(Functor l, Functor l2)
	l=Cons(x, tail)
	l2=tail
	
rel find(Functor l, Any e, i)
	c::is_int(i)
	c::def(e)
	l=Cons(e1,tail)
	if(e=e1)
		i=0
	else
		find(tail,e,j)
		i=j+1

rel findOnce(Functor l, Any e, i)
	l=Cons(x,tail)
	if(e=x)
		i=0
		c::cut()
	else
		findOnce(tail,e,j)
		i=j+1
		c::cut()

/*
	
rel set(t,o,o2,t2)
	case
		t=T(e,v,tail)
		if(e=o)
			t2=T(o,o2,tail)
		else
			set(tail,o,o2,t3)
			t2=T(e,v,t3)
	case
		t2=T(o,o2,t)

rel last(Functor l,a)
	get(l, size(l)-1, a)

rel slice(Functor l, i, j, Functor l2)
	once pl::slice(l, i, j, l2)

rel has(Functor l, Any x)
	find(l, x, _)

*/
rel reverse(Functor l, Functor l2)
	if(l=Cons(a,tail))
		reverse(tail, ltemp)
		concat(ltemp, Cons(a,Cons), l2)
	else
		l=Cons
		l2=Cons

// ... 
		

//like map but relation has an argument for the index
//each([1,2,3], rel(i, x, y) y=x*i;, x) //x = [0, 2, 6]
rel eachIndex(l,p,i,l2)
	if(l=Cons)
		l2=Cons
	else
		l=Cons(head, tail)
		l2=Cons(head2, tail2)
		p(i, head, head2)
		eachIndex(tail, p, i+1, tail2)
		
rel each(Functor l, Relation Any Any p, Functor l2)
	eachIndex(l, p, 0, l2)

rel join(Functor l, String sep, String s)
	if(l=Cons(a,Cons))
		s=a
	elseif(l=Cons(s1,tail))
		join(tail,sep,s2)
		string.concat(s1,sep,temp)
		string.concat(temp,s2,s)
	else
		l=Cons
		s=''
		
rel every(Functor l, Relation Any p)
	if(l=Cons)
		l2=Cons
	else
		l=Cons(head, tail)
		p(head)
		every(tail, p)

rel fold(Functor l, pred, Any a, Any result)
	if(l=Cons(b,tail))
		pred(a,b,c)
		fold(tail, pred, c, result)
	else
		l=Cons
		result=a
			
rel map(Functor l, Relation Any Any p, Functor l2)
	if(l=Cons)
		l2=Cons
	else
		l=Cons(head, tail)
		l2=Cons(head2, tail2)
		p(head, head2)
		map(tail, p, tail2)

//do p(x) n times, using result as next iteration argument
rel iterate(p, Number n, x, y)
	if(n=0)
		y=x
	else
		p(x,x2)
		iterate(p, n-1, x2, y)

rel first(Functor l, Any a)
	l=Cons(a,_)

rel rest(Functor l, Any b)
	l=Cons(_,b)
t={
	'find'=find
	findOnce=findOnce
	'size'=size
	'filter'=filter
	'removeIndex'=removeIndex
	'remove'=remove
	'push'=push
	pop=pop
	'has'=has
	'concat'=concat
	'every'=every
	'forall'=every
	'map'=map
	'removeAll'=removeAll
	join=join
	fold=fold
	each=each
	eachIndex=eachIndex
	iterate=iterate
	reverse=reverse
	first=first
	last=last
}
export(t)/*
c::table_new(t)
export(t)

//remove([1,2,3,4,5],1,l)
//removeElement([1,2,3,4,5],2,l)
print(l)*/