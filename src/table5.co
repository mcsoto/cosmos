functor(T, Functor)
	
rel new(t)
	t=T

rel get(t,o,o2)
	case
		t=T(o,o2,_)
		cut
	case
		t=T(_,_,t2)
		//c::rec(t2,o,o2)
		get(t2,o,o2)
	/*
rel set(t,o,o2,t2)
	t2=T(o,o2,t)
	*/
	
rel set(t,o,o2,t2)
	case
		t=T(e,v,tail)
		if(e=o)
			t2=T(o,o2,tail)
		else
			set(tail,o,o2,t3)
			t2=T(e,v,t3)
	case
		t2=T(o,o2,t)
	
rel set2(t,t2,o,o2)
	set(t,o,o2,t2)
	throw('set2')

rel require(i,i2) c::require(i, i2);
//require('table6.bc', table)
	/*
t={
	'new'=new
	'get'=get
	'set'=set
}
*/
new(t0)
set(t0,'new',new,t1)
set(t1,'get',get,t2)
set(t2,'set',set,t)
//set(t3,'set2',set2,t)
//export(t1)
//exports=t3
export(t)
/*
insert(E, f, 2)
insert(f, f2, 1)
insert(f2, f3, 3)
insert(f3, f4, 4)
print(f4)
member(f4,1)
*/