
//require('mutable',mutable)

require('fixed',fixed)

require('io5',io)

require('logic5',logic)

require('string5.bc', string)

functor(Cons, Functor)

//print2=print
/*
rel write(s)
	if(type(s,'string'))
	else
	
rel write(s)
	if(s!='get')
		io.write(s)
	else
		true
	*/
rel write(s)
	logic.type(s,x)
	if(x='str')
		//x='String'
		string.size(s,n)
		n>10
		cut
		io.write('#str')
	else
		io.write(s)
		cut
		
rel str(l,i,n)
	choose(i=n)
		io.write('')
	elseif(i=n-1)
		fixed.get(l,i,e)
		write(e)
	else
		fixed.get(l,i,e)
		write(e)
		io.write(', ')
		str(l,i+1,n)
	
debug={
	rel sethook(p)
		c::sethook(p)
		
	rel trace(l)
		c::closure(e,name,n,i)
		//print(['-',l,name,n,i])
		//print(name)
		choose(name='get')
			true
		else
			io.write('| ')
			io.write(name)
			io.write('(')
			str(l,0,n)
			io.write(')\n')
			
	rel getlocal(i,x)
		c::getlocal(i,x)
		
	rel print(o)
		if(mutable.get(t,'on',1))
			print2(o)
		else
			true
		
	rel switch(i)
		mutable.set(t,'on',i)
	rel p(i)
		true
}
/*
rel p(x)
	true

rel q(x,y,z)
	true
	
rel callbacks()
	i=2
	c::getfname(name)
	debug.getlocal(2,y)
	//debug.p()
	//o=debug.p
	c::getnargs(c)
	c::getnlocs(n)
	print([c,n,x,x1])
	debug.sethook(p)
//print(debug)
//print(_table)
//callbacks()
//debug.sethook(debug.trace)
//p(x)
p(1)
q(1,x,3)

rel p(x)
	x=1//+2
	
rel callbacks()
	debug.sethook(1)
	
//p(3)
p(x)
*/
export(debug)