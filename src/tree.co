functor(T, Functor)
functor(Pair, Functor)



functor(Red, Functor)
functor(Black, Functor)

functor(Tree, Functor)
functor(E, Functor) //empty
functor(Tuple, Functor)
functor(Pair, Functor)
/*
rel require(i,i2)
	c::require(i, i2)

rel print(i)
	c::print(i)
*/
rel pause()
	c::read(x)
	
rel balance(f,f2)
	case
		f=Tuple(Black, Tree(Red, Tree(Red, a,x,b), y, c), z, d) //B (T R (T R a x b) y c) z d
		f2=Tree(Red, Tree(Black, a,x,b), y, Tree(Black,c,z,d)) //T R (T B a x b) y (T B c z d)
	case
		f=Tuple(color,a,x,b)
		f2=Tree(color,a,x,b) //color a x b = T color a x b

rel ins(f,f2,x)
	case
		f=E
		f2=Tree(Red, E, x, E) //E = T R E x E
	case
		//(T color a y b) | x < y = balance color (ins a) y b | x == y = T color a y b | x > y = balance color a y (ins b)
		f=Tree(color, a, y, b)
		if(x<y)
			ins(a, a2, x)
			balance(Tuple(color, a2, y, b), f2)
		elseif(x=y)
			f2=Tree(color, a, y, b)
		else
			ins(b, b2, x)
			balance(Tuple(color, a, y, b2), f2)

rel insert(f,f3,x)
	ins(f, f2, x)
	f2=Tree(_, a, y, b)
	f3=Tree(Black, a, y, b)
	
rel member(f,x)
	f=Tree(color, a, y, b)
	if(x<y)
		member(a,x)
	elseif(x=y)
		true
	else
		member(b,x)

//rel find(Functor l, Any e, Integer i) l=Cons(x,tail);
	
rel set(f,f2,x,y)
	insert(f, f2, Pair(x,y))

rel get(f,x,y)
	member(f,Pair(x,y))

insert(E, f, 2)
insert(f, f2, Pair(1,3))
print(f)
set(f2, f3, 3,'a')
set(f3, f4, 4,'b')/*
insert(f2, f3, 3)
insert(f3, f4, 4)
print(f4)
member(f4,1)
*/
member(f4,Pair(1,x))
print(x)
print(get(f4,3))