
functor(Cons, Functor)
functor(F, Functor)
functor(F2, Functor)

//gen
functor(Var, Functor) //Var(name, object|local|args, type)
functor(Lib, Functor)

rel require(i,i2)
	c::require(i, i2)

rel print(i)
	c::print(i)

rel pause()
	c::read(x)
	
//list lib

require('list.bc', list)

rel has(Functor l, Any e)
	if(l=Cons(e, _))
		true
	else
		l=Cons(_, tail)
		has(tail,e)

rel size(Functor l, Integer n)
	//c::lsize(l, n)
	list.size(l,n)

/*
	env methods
*/

require('table.bc', table)

rel set(t,o,o2,t2)
	//c::table_set(t,o,o2,t2)
	table.set(t,o,o2,t2)
	c::cut()
	
rel get(t,o,o2)
	//c::table_get(t,o,o2)
	table.get(t,o,o2)
	c::cut()

rel env_init(env, vars, fcs, consts, prev)
	//c::table_new(t)
	if(get(prev,'types',t))
		true
	else
		table.new(t)
	env={
		'vars'=vars
		'fcs'=fcs
		'types'=t
		'consts'=consts
		'upvals'=[]
		'branch'=0
		'top'=[]
		'prev'=prev
	}
	true
	
rel env_new(env, fcs, prev)
	env_init(env, [], fcs, [], prev)
	
rel env_size(env, n)
	x=env['vars']
	size(x, n)
	
rel env_vars(env, x)
	x=env['vars']

rel env_functors(env, x)
	x=env['fcs']
	
rel env_push(env, f, env2)
	f=Var(name,n,type)
	c::def(n)
	env_vars(env,x)
	set(env, 'vars', Cons(f, x), env2)
	
rel env_push_on(env, String str, f, env2)
	get(env, str, l)
	fc=Cons(f, l)
	set(env, str, fc, env2)
	//c::throw('-')
	
rel env_set(env, s, x, env2)
	table.set(env,s,x,env2)
	
rel env_push_var(env, env2, f)
	env_push_on(env, 'vars', f, env2)
		
rel env_push_if_not_found(env, f, env2)
	//vars = env.vars
	get(env, 'vars', vars)
	f = Var(name, _ , _)
	if(has(vars, Var(name, _, _)))
		env2=env
	else
		set(env,'vars', Cons(f, vars), env2)
	
/* 
	env searching
*/

rel _env_get_var(l, a, f)
	case
		l=Cons(head, _)
		head=Var(a,_,_)
		f=head
		//print(l)
	case
		l=Cons(_, tail)
		_env_get_var(tail, a, f)
	
rel env_get_var(env, a, f)
	vars=env['vars']
	_env_get_var(vars, a, f)
	
rel env_get(env, s, t)
	t=env[s]
	
rel env_prevs(env, a, f)
	prev=env['prev']
	vars=prev['vars']
	//vars=env.prev.vars
	_env_get_var(vars, a, f)
	
//require('list.bc', list)

t={
	'new'=env_new
	'vars'=env_vars
	'push_on'=env_push_on
	'push'=env_push
	'functors'=env_functors
	'size'=env_size
	'prevs'=env_prevs
	'get_var'=env_get_var
	'init'=env_init
	'get'=env_get
	'set'=env_set
	'push_var'=push_var
}
export(t)

env_new(e,[],[])
print(e)/*
env_push(e,Var(2,1,_),e2)
print(e2)
env_get_var(e2, 2, f)
print(f)
env_get(e, 'types', o)
print(o)*/